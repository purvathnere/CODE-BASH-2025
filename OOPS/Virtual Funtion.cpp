Virtual Function ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?
‡§ú‡§¨ ‡§Ü‡§™ inheritance (‡§µ‡§ø‡§∞‡§æ‡§∏‡§§) ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§§‡•á ‡§π‡•ã ‚Äî ‡§Ø‡§æ‡§®‡•Ä ‡§è‡§ï base class ‡§∏‡•á derived class ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•ã ‚Äî ‡§§‡§¨ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•ã ‡§ï‡§ø:

"‡§Ö‡§ó‡§∞ base class ‡§ï‡§æ pointer/ reference derived class ‡§ï‡•á object ‡§ï‡•ã point ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§§‡•ã derived class ‡§ï‡§æ function ‡§ö‡§≤‡•á, ‡§® ‡§ï‡§ø base class ‡§ï‡§æ‡•§"

‡§á‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ base class ‡§ï‡•á function ‡§ï‡•ã virtual ‡§¨‡§®‡§æ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§


Virtual function ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Äî
"‡§ú‡•ã function run-time (program ‡§ö‡§≤‡§§‡•á ‡§∏‡§Æ‡§Ø) decide ‡§π‡•ã ‡§ï‡§ø ‡§ï‡•å‡§® ‡§∏‡§æ ‡§ö‡§≤‡•á‡§ó‡§æ‡•§"


#include <iostream>
using namespace std;

class Animal {
public:
    virtual void sound() {
        cout << "Animal sound" << endl;
    }
};

class Dog : public Animal {
public:
    void sound() {
        cout << "Dog barks" << endl;
    }
};
üî∏ Main function:
cpp
Copy
Edit
int main() {
    Animal* a;     // base class ‡§ï‡§æ pointer
    Dog d;

    a = &d;        // base class pointer ‚Üí derived class object

    a->sound();    // ‡§Ø‡•á ‡§ï‡§ø‡§∏‡§ï‡§æ sound() call ‡§π‡•ã‡§ó‡§æ?
    return 0;
}
o/t:
Dog barks
‡§Ö‡§ó‡§∞ sound() virtual ‡§® ‡§π‡•ã‡§§‡§æ, ‡§§‡•ã output ‡§π‡•ã‡§§‡§æ:


Animal sound
üîë Point to Remember:
Feature	Explanation
Virtual keyword	Base class ‡§ï‡•á function ‡§ï‡•ã special ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à
Use	Run-time polymorphism ‡§ï‡•á ‡§≤‡§ø‡§è
Resolves at	Run-time (late binding)
Without virtual	Base class ‡§ï‡§æ function call ‡§π‡•ã‡§ó‡§æ
With virtual	Derived class ‡§ï‡§æ function call ‡§π‡•ã‡§ó‡§æ

 ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à?
‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä ‡§Ü‡§™ base class pointer ‡§∏‡•á derived class object ‡§ï‡•ã handle ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•ã, ‡§≤‡•á‡§ï‡§ø‡§® actual behavior derived class ‡§ï‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‚Äî ‡§µ‡§π‡•Ä virtual function ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§

